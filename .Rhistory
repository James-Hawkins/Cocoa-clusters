'Ofram',
'Mahogany',
'Waawa',
'Odum',
'Avocado',
'Oil palm',
'Nyame Dua',
'Oeodru',
'Danta',
'Red-wood',
'Yellow-wood',
'Nkyene ne ngo',
'Rubber',
'Cola nut',
'Gliricidia',
'Edinam',
'Nyankuma',
'Otie')
fruit.trees <<- c('Oil palm',
'Citrus',
'Banana',
'Plantain')
organics.tree <- data.frame()
tree.data  <-  read_excel("./data in/tree_allometry_data.xlsx", sheet=1)
tree.increment.data  <-  read_excel("./data in/Lowe_et_al_1997.xlsx", sheet=2)
for (t in all.trees){
organics.tree[t,'tree.name'] <- t
organics.tree[t,'sci.name'] <- tree.data[tree.data$Tree == t ,'Scientific_name']
organics.tree[t,'Tree.type'] <- tree.data[tree.data$Tree == t ,'Tree.type']
organics.tree[t,'index'] <- which(all.trees == t)
organics.tree[t,'category'] <- tree.data[tree.data$Tree == t ,'Plant.category']
organics.tree[t,'output.category'] <- tree.data[tree.data$Tree == t ,'Output.category']
organics.tree[t,'residue_N_frac_leaves'] <-   tree.data[tree.data$Tree == t ,'residue_N_frac_leaves']
organics.tree[t,'residue_C_frac_leaves'] <- tree.data[tree.data$Tree == t ,'residue_C_frac_leaves']
organics.tree[t,'residue_N_frac_branch'] <-   tree.data[tree.data$Tree == t ,'residue_N_frac_branch']
organics.tree[t,'residue_C_frac_branch'] <- tree.data[tree.data$Tree == t ,'residue_C_frac_branch']
# organics.tree[t,'biomass_C_content'] <- tree.data[tree.data$Tree == t ,'biomass_C_content']
#   organics.tree[t,'leaf.mass.kg'] <- tree.data[tree.data$Tree == t ,'leaf.mass.kg']
organics.tree[t,'leaf_cycling_index']    <-  tree.data[tree.data$Tree == t ,'leaf_cycling_index']
organics.tree[t,'branch_cycling_index']    <-  tree.data[tree.data$Tree == t ,'branch_cycling_index']
organics.tree[t,'dbh.max.cm']    <-  tree.data[tree.data$Tree == t ,'dbh.max.cm']
organics.tree[t,'stem.height.m']    <-  tree.data[tree.data$Tree == t ,'stem.height.m' ]
organics.tree[t,'stem.volume.m3']    <-  tree.data[tree.data$Tree == t ,'stem.volume.m3']
organics.tree[t,'branch.volume.m3']    <-  tree.data[tree.data$Tree == t ,'branch.volume.m3']
organics.tree[t,'total.ag.wood.volume.m3']    <-  tree.data[tree.data$Tree == t ,'total.ag.wood.volume.m3']
organics.tree[t,'mean.density.kg.m3']    <-  tree.data[tree.data$Tree == t ,'mean.density.kg.m3']
organics.tree[t,'mean.density.Mg.m3']    <-  tree.data[tree.data$Tree == t ,'mean.density.kg.m3'] / 1000
organics.tree[t,'stem.mass.kg']    <-  tree.data[tree.data$Tree == t ,'stem.mass.kg']
organics.tree[t,'branch.mass.kg.per.tree']    <-  tree.data[tree.data$Tree == t ,'branch.mass.kg.per.tree']
organics.tree[t,'leaf.mass.kg']    <-  tree.data[tree.data$Tree == t ,'leaf.mass.kg']
# Calculated
organics.tree[t,'total.above.ground.woody.biomass.kg.per.tree']    <- (organics.tree[t,'branch.mass.kg.per.tree'] +  organics.tree[t,'stem.mass.kg'] )
organics.tree[t,'total.above.ground.biomass.kg.per.tree']    <- (organics.tree[t,'total.above.ground.woody.biomass.kg.per.tree'] + organics.tree[t,'leaf.mass.kg'] )
organics.tree[t,'total.aboveground.volume.m3.sd.frac']    <- tree.data[tree.data$Tree == t ,'total.aboveground.volume.m3.sd.frac']
organics.tree[t,'total.volume.m3.sd.frac']    <-   organics.tree[t,'total.aboveground.volume.m3.sd.frac']
organics.tree[t,'total.below.ground.woody.biomass.kg.per.tree']    <- (2.718^(-1.0587 + 0.8836*log(organics.tree[t,'total.above.ground.woody.biomass.kg.per.tree'])))
organics.tree[t,'total.biomass.kg.per.tree']    <- organics.tree[t,'total.below.ground.woody.biomass.kg.per.tree'] +  organics.tree[t,'total.above.ground.biomass.kg.per.tree']
organics.tree[t,'total.biomass.Mg.per.tree']    <-  (organics.tree[t,'total.biomass.kg.per.tree']  / 1000 )
if ( organics.tree[t,'Tree.type']== 'Deciduous' ){
for (d in 1:nrow(tree.increment.data)){
if (
(organics.tree[t,'dbh.max.cm'] > tree.increment.data[d, 'Diameter.cm.low']) &
(organics.tree[t,'dbh.max.cm'] < tree.increment.data[(d+1), 'Diameter.cm.low'])
){
# Convert bole volume increment as reported in Lowe et al. (1997) to total above-ground volume increment
tree.increment.data[d, 'AG.increment.1000.cm3.yr'] <- tree.increment.data[d, 'Bole.increment.1000.cm3.yr'] * (1 / 0.85) *(1/ 0.70) # Convert to stem volume and from stem volume to total AG volume
organics.tree[t,'volume.increment.m3.yr']    <- cv.cm3.to.m3 * 1000 * tree.increment.data[d, 'AG.increment.1000.cm3.yr']
organics.tree[t,'volume.increment.m3.yr.SD']    <- tree.increment.data[d, 'SD.Increment.1000.cm3.yr'] / tree.increment.data[d, 'AG.increment.1000.cm3.yr']
}
}
} else if ( organics.tree[t,'Tree.type']== 'Evergreen' ){
# For evergreen trees Van Do et al. (2017) data is defined from total AG volume and
# hence no need to correct increment data
mean.volume.increment.per.year.per.frac  <- (86.0 / 298.2) * (522/576) / (2012 - 2004) # From Table 1 of Van Do et al. (2017)
#mean.volume.increment.per.year.total.absolute  <-  mean.volume.increment.per.year.frac.total * 298.2 * mean(organics.tree[organics.tree$Tree.type == 'Evergreen','mean.density.Mg.m3'])
organics.tree[t,'volume.increment.m3.yr']  <- mean.volume.increment.per.year.per.frac * 0.5 *     organics.tree[t,'total.biomass.Mg.per.tree'] * mean(organics.tree[organics.tree$Tree.type == 'Evergreen','mean.density.Mg.m3'])
#mean.volume.increment.per.year.frac.total * organics.tree[t,'total.ag.wood.volume.m3']
#  (86.0 / 384.2) / (2012 - 2004) * mean(organics.tree[organics.tree$Tree.type == 'Evergreen','mean.density.Mg.m3']) * (522/576)  # From Table 1 of Van Do et al. (2017)
organics.tree[t,'volume.increment.m3.yr.SD'] <-  0.053
}
organics.tree[t,'mature.age.yrs'] <-    organics.tree[t,'total.ag.wood.volume.m3'] / organics.tree[t,'volume.increment.m3.yr']
}
# View(organics.tree)
organics.tree['Banana','mature.age.yrs'] <- 6
organics.tree['Plantain','mature.age.yrs'] <- 6
organics.tree['Citrus','mature.age.yrs'] <- 7
organics.tree['Avocado','mature.age.yrs'] <- 10
# organics.tree$mature.age.yrs
organics.tree <<-  organics.tree
organics <<- organics
shade.trees.as.hardw <<- as.vector( organics.tree[organics.tree$output.category == 'Hardwood' , 'tree.name'])
shade.trees.as.fuelw <<- as.vector( organics.tree[organics.tree$output.category == 'Fuelwood' , 'tree.name'])
# Organic random
# Uncertainty on organics data
org.tree.uncertain.vars <<- c(
'stem.volume.m3',
'mature.age.yrs',
'stem.mass.kg',
'leaf.mass.kg',
'branch.mass.kg.per.tree',
'branch_cycling_index',
'leaf_cycling_index',
'residue_C_frac_leaves',
'residue_N_frac_leaves',
'residue_C_frac_branch',
'residue_N_frac_branch'
)
org.tree.random.vars <<- c(
'stem.volume.m3.sd',
'mature.age.yrs.sd',
'stem.mass.kg.sd',
'leaf.mass.kg.sd',
'branch.mass.kg.per.tree.sd',
'branch_cycling_index.sd',
'leaf_cycling_index.sd',
'residue_C_frac_leaves.sd',
'residue_N_frac_leaves.sd',
'residue_C_frac_branch.sd',
'residue_N_frac_branch.sd'
)
# mature age
# stemm mass
# branch mass
# branch cycling index
# leaf cycling index
# biomass c content
# residue N frac
# residue C frac
#
org.tree.random <- data.frame(  matrix(ncol = length(org.tree.random.vars), nrow = length(all.trees) , dimnames=list(all.trees, org.tree.random.vars )))
for (v in 1:length(org.tree.uncertain.vars)){
print(v)
var.string.rd <- str_c( org.tree.uncertain.vars[v] ,'.rd')
organics.tree[,var.string.rd] <-NA
}
for (t in all.trees) {
org.tree.random[t,'stem.volume.m3.sd'] <-     organics.tree[t,'total.aboveground.volume.m3.sd.frac']
org.tree.random[t,'stem.mass.kg.sd'] <- organics.tree[t,'total.aboveground.volume.m3.sd.frac']
org.tree.random[t,'leaf.mass.kg.sd'] <- organics.tree[t,'total.aboveground.volume.m3.sd.frac']
org.tree.random[t,'branch.mass.kg.per.tree.sd'] <- organics.tree[t,'total.aboveground.volume.m3.sd.frac']
if (organics.tree[t,'Tree.type'] == 'Deciduous'){ # thomas and martin
org.tree.random[t,'residue_C_frac_branch.sd'] <- 2.68/ 47.69
org.tree.random[t,'residue_C_frac_leaves.sd'] <- 3.42/47.25
org.tree.random[t,'branch_cycling_index.sd'] <- 0.2 # Need actual data
org.tree.random[t,'leaf_cycling_index.sd'] <- 0.12 # Saj
org.tree.random[t,'mature.age.yrs.sd'] <- 0.3213 # Calculated from Lowe et al. (1987) data
}
if (organics.tree[t,'Tree.type'] == 'Evergreen'){
org.tree.random[t,'residue_C_frac_branch.sd'] <- 3.58 / 47.78
org.tree.random[t,'residue_C_frac_leaves.sd'] <- 3.86/48.48
org.tree.random[t,'branch_cycling_index.sd'] <- 0.2 # Kahiu and Hanan (2017)
org.tree.random[t,'leaf_cycling_index.sd'] <- 0.0 # since evergreen
org.tree.random[t,'mature.age.yrs.sd'] <-  (4.6 / 86.0)  # From Table 1 of Van Do et al. (2017)
}
org.tree.random[t,'residue_N_frac_leaves.sd'] <- 30.4 / 203 # Heineman et al (2016)
org.tree.random[t,'residue_N_frac_branch.sd'] <- 30.4 / 203 # Heineman et al (2016)
}
org.tree.random <<-   org.tree.random
# Random pre-establishment age for non-cocoa trees
mean.age.frac.total.establishment.date <<- 0.5
sd.age.frac.total.establishment.date <<- 0.4
# Annual increment data
tree.growth  <-  read_excel("./data in/Lowe_et_al_1997.xlsx", sheet=2)
diams <- c('0-5',
'5-20',
'20-40',
'40-60',
'60-80',
'80-100',
'100-120',
'120-140',
'140-160',
'160-180',
'180-200',
'200-220',
'220-240',
'240-260',
'260-280',
'280-300',
'300-320',
'320-340',
'340-360',
'360-380',
'380-400',
'400-420',
'420-440',
'440-460',
'460-480',
'480-500',
'500-520')
vars <- c('Bole.increment.1000.cm3.yr',
'SD.Increment.1000.cm3.yr',
'Source'
)
tree.growth.data <<- data.frame(  matrix(ncol = length(vars ), nrow = length(diams) , dimnames=list(diams, vars)))
for (i in 1:nrow( tree.growth)  ){
tree.growth.data[i,'Diameter.cm.range'] <- tree.growth[i , 'Diameter.cm.range']
tree.growth.data[i,'Bole.increment.1000.cm3.yr'] <- tree.growth[i , 'Bole.increment.1000.cm3.yr']
tree.growth.data[i,'SD.Increment.1000.cm3.yr'] <- tree.growth[i , 'Bole.increment.1000.cm3.yr']
tree.growth.data[i,'Source'] <- 'Measured'
}
tree.growth.data[6,'Source'] <- 'Extrapolated'
tree.growth.data[7,'Source'] <- 'Extrapolated'
ordered.diams <- c( tree.growth.data[,'Diameter.cm.range'])
tree.growth.data[  ,  'Diameter.cm'] <- factor (  tree.growth.data[,'Diameter.cm.range'] ,ordered.diams )
tree.sizes.x.tick.fs <- 9
x.tick.angle <- 90
p.mg.right <- 0.2
p.mg.top <- 0.2
p.mg.bottom <- 0.2
p.mg.left <- 0.2
biom.incr <<- ggplot( tree.growth.data , aes(x = Diameter.cm, y = Increment.1000.cm3.yr ))+
geom_point()+
ylab(bquote('Biomass increment (1000  '*cm^3*' '*yr^-1*')')) +
xlab(bquote('Diameter (cm  '*tree^-1*') ')) +
theme(
#  panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = unit(c(0.65  ,    0.65  ,p.mg.right , p.mg.right), "cm"),
axis.text.x = element_text(angle = x.tick.angle, vjust = 0.5, hjust = 0.5, size =   tree.sizes.x.tick.fs , face = 'italic'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.background = element_blank())
## ~~ Inflation data
# Define dataframe for raw price inflation data
raw.inflation.data  <-  read_excel("./data in/price_inflation_data.xlsx", sheet=1)
products <- raw.inflation.data$product
mn.cc.production.period <- 30
cc.production.period.frac.2021 <- 0.53
# Define price multiplier dataframe
price.adj <- data.frame(  matrix(ncol = 2 , nrow = length(products) , dimnames=list(products,c('inflation.rate', 'deflator'))))
price.adj[,'deflator'] <- NA
CPI.deflator <-1/( raw.inflation.data[raw.inflation.data$product == 'inputs_general','mean.nomn.price.gr.frac.yr']^ 30
)
for (product in products) {
price.adj[product ,'inflation.rate'] <- as.numeric( raw.inflation.data[raw.inflation.data$product == product,'mean.nomn.price.gr.frac.yr'] )
# Calcualte projected final year price
power.final.year <- mn.cc.production.period * (1 - cc.production.period.frac.2021)
final.yr.price <- 1 * (  price.adj[product ,'inflation.rate'] ) ^ power.final.year
# Calculate estimated first year price
power.first.year <- 1 / (mn.cc.production.period * (cc.production.period.frac.2021))
first.yr.price <- (1^(power.first.year))/ price.adj[product ,'inflation.rate']
price.adj[product  ,'first.yr.price'] <- first.yr.price
price.adj[product  ,'final.yr.price'] <- final.yr.price
final.yr.price.deflat <- final.yr.price * CPI.deflator
production.period.mn.price <- (first.yr.price +  final.yr.price.deflat ) / 2
price.adj[product ,'deflator'] <-  production.period.mn.price
if ( (product == 'hardwood') ){ price.adj[product,'deflator']  <- final.yr.price.deflat  }
}
price.adj['cocoa' ,'deflator'] <- 1
price.adj <<-  price.adj
# ANIMAL N EXCRETION
organics.tree
an_excret_data   <- read.csv('.\\data in\\an_excret_data.csv')
livestock <- c('sheep' , 'goat', 'poultry', 'rabbits', 'cattle')
lives_N_excret <<- data.frame(  matrix(ncol = 1 , nrow = length(livestock) , dimnames=list(livestock , 'N_excret_kg_yr')))
lives_N_excret['sheep','N_excret_kg_yr'] <-  an_excret_data[1,'N_excret_kg_yr']
lives_N_excret['goat','N_excret_kg_yr'] <-  an_excret_data[2,'N_excret_kg_yr']
lives_N_excret['poultry','N_excret_kg_yr'] <-  an_excret_data[3,'N_excret_kg_yr']
lives_N_excret['rabbits','N_excret_kg_yr'] <-  an_excret_data[4,'N_excret_kg_yr']
lives_N_excret['cattle','N_excret_kg_yr'] <-  an_excret_data[5,'N_excret_kg_yr']
lives_N_excret <<- lives_N_excret
# Emission factors
e_factors <<- c(
"EF.1.sn"   ,
"EF.3.prp.cpp"  ,
"EF.3.prp.so"  ,
"EF.1.other" ,
"EF.4"  ,
"EF.5"   ,
"Frac.gas.f"  ,
"Frac.gas.m" ,
"Frac.leach"  ,
"FRAC.gasf.urea"  ,
"FRAC.gasf.an"     ,
"FRAC.gasf.nitr"  ,
"FRAC.gasf.an.nitr")
e.facs.vars <- c('value' ,
'std.dev',
'std.dev.frac',
'min.range',
'max.range',
'value.rd'
)
EF.raw <- read_excel("./data in/GHG_factors.xlsx", sheet=1)
EF <<-  data.frame(  matrix(ncol = length(e.facs.vars) , nrow = length( e_factors) , dimnames=list( e_factors , e.facs.vars )))
for (r in 1:nrow(EF)){
EF[r,'value'] <- EF.raw[r,'value']
EF[r,'min.range'] <- EF.raw[r,'min.value']
EF[r,'max.range'] <- EF.raw[r,'max.value']
EF[r,'std.dev'] <- 0.5 * (EF.raw[r,'max.value'] - EF.raw[r,'min.value']) /1.96
EF[r,'std.dev.frac'] <- EF[r,'std.dev']/ EF[r,'value']
}
EF <<- EF
}
main.data()
setwd(main.dir)
main.data()
global.funcs <- function(){
remove_outliers <<- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
# --  Uncertainty analysis
# GHG
GHG.unc.vars <<- c(
'cocoa.tree.biomass',
'fert.N.content'
)
var.string <<- c(
'cocoa.tree.average.aboveground.biomass.kg.per.tree',
'total_fert_Nitr_applied_kg_per_ha'
)
GHG.random.cols <- c('var.string' ,'mean', 'std.dev', 'std.dev.frac', 'min.range','max.range' ,  'min.range.frac','max.range.frac')
GHG.random <- data.frame(  matrix(ncol = length( GHG.random.cols) , nrow = length( GHG.unc.vars) , dimnames=list(  GHG.unc.vars , GHG.random.cols)))
GHG.random[,'var.string'] <- var.string
GHG.random['cocoa.tree.biomass','std.dev.frac'] <- 0.1326 # From Romero (2016) as described in paper
GHG.random['fert.N.content','std.dev.frac'] <- 0.35 # As described in paper
GHG.random <<- GHG.random
# VOP
VOP.unc.vars <<- c(
'wage.hi',
'wage.hh',
'variable.costs',
'fixed.costs',
'cocoa.yield'
)
var.string <<- c(
'total.hi.labor.expenses.usd.per.ha',
'total.hh.lab.man.days.per.year.per.ha',
'total_agrochem_costs_plus_fert_usd_per_ha',
'capital.expenses.USD.per.ha',
'cc.yd.lt.mn.Mg.ha'
)
VOP.random <- data.frame(  matrix(ncol = 5 , nrow = length( VOP.unc.vars) , dimnames=list(  VOP.unc.vars , c('var.string' ,'mean', 'std.dev.frac' , 'min.range' , 'max.range'))))
VOP.random[,'var.string'] <- var.string
ids <- ccoa_ids
define.VOP.random <<- function(ids){
for (v in VOP.unc.vars) {
vars <- remove_outliers(
na.omit(comp[(comp$hhID %in% ids) & !is.na(comp[,VOP.random[v,'var.string']]) ,  VOP.random[v,'var.string']])
)
vars <- na.omit(  vars )
VOP.random[v,'mean'] <- mean(na.omit(comp[(comp$hhID %in% ids) & !is.na(comp[,VOP.random[v,'var.string']]) ,  VOP.random[v,'var.string']]))
VOP.random[v,'std.dev.frac'] <- sd(na.omit(comp[(comp$hhID %in% ids) & !is.na(comp[,VOP.random[v,'var.string']]) ,  VOP.random[v,'var.string']])) / VOP.random[v,'mean']
VOP.random[v,'std.dev.frac'] <- sd(vars) /  VOP.random[v,'mean']
VOP.random[v,'min.range'] <- min(na.omit(comp[(comp$hhID %in% ids) & !is.na(comp[,VOP.random[v,'var.string']]) ,  VOP.random[v,'var.string']])) / VOP.random[v,'mean']
VOP.random[v,'max.range'] <- max(na.omit(comp[(comp$hhID %in% ids) & !is.na(comp[,VOP.random[v,'var.string']]) ,  VOP.random[v,'var.string']])) / VOP.random[v,'mean']
if (is.na(VOP.random[v,'std.dev.frac'])) { VOP.random[v,'std.dev.frac'] <- 0.2  }
#  if (is.na(VOP.random[v,'min.range'])) { VOP.random[v,'min.range'] <- 0.5  }
#  if (is.na(VOP.random[v,'max.range'])) { VOP.random[v,'max.range'] <- 1.5  }
}
# VOP.random['wage.hi','std.dev.frac'] <-.001
#  VOP.random['wage.hh','std.dev.frac'] <-.001
#  VOP.random['variable.costs','std.dev.frac'] <-.001
# VOP.random['fixed.costs','std.dev.frac'] <-.001
#  VOP.random['wage.hh','std.dev.frac'] <-.001
#  VOP.random['cocoa.yield','std.dev.frac'] <-  0.01
VOP.random <<- VOP.random
return (VOP.random)
}
}
global.funcs()
run.mods.typ()
source("scn.GHG.new.R")
source("run.uncert.R")
comp[,'gross.revenue.frt.usd.per.ha']
comp[,'gross.revenue.ag.cmd.usd.per.ha']
comp[,'gross.revenue.main.crop.usd.per.ha']
comp[,'gross.revenue.usd.per.ha.frac.frt']
comp[,'gross.revenue.usd.per.ha.frac.ann.crop']
comp[,'gross.revenue.usd.per.ha.frac.fuelw']
typology.data()
run.typology()
run.typology()
comp <<- run.VOP(comp)
summary(comp[comp$cm_crop == 1 ,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.cc'])
summary(comp[comp$cm_crop == 1 ,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ann.crop'])
summary(comp[comp$cm_crop == 1 ,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.frt'])
summary(comp[comp$cm_crop == 1 ,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ag.cmd'])
run.typology()
run.typology()
yg.cc.plot.theor.trad <- ggplot(comp[comp$cm_crop == 1  &  (comp$Variety == 'Amazonia') & (comp$yld_pc_attain_plot < 100) ,  ]
, aes(x=years_since_planted , y=cc_yield_fn_Mg_per_ha)) +
geom_point(aes(x=years_since_planted  , y= cc_yield_fn_Mg_per_ha), shape = 1 ,color = 'gray') +
geom_smooth(data = cc.m.yd.all , aes(x= year , y=  Traditional  ), method = 'loess' ,se = FALSE, span = 0.605 , color = yld.line.col) +
# geom_point(data = cc.m.yd.all , aes(x= year , y=  Traditional , color = 'Traditional' )) +
# geom_smooth(data = cc.m.yd.all , aes(x= year , y=  Traditional , color = 'Traditional' ), method = 'loess' ,se = FALSE, span = 0.605 ) +
xlab('')+
#ylab(bquote('Nitrous oxide (kg '*N[2]O*' ha  '*yr^-1*')'))+
ylab(bquote('Yield (Mg  dry beans   '*ha^-1*' '*yr^-1*')     '))+
#facet_wrap( system ~ . , ncol =2, nrow = 1 )   +
#geom_point()+
ggtitle(tit.tx.t) +
scale_y_continuous(  limits = c( 0,yd.max   ) , breaks = seq(0, round(yd.max) , by=.5)) +
scale_x_continuous(  limits = c( 0, prod.cycle.years.trad  ), breaks =seq(0, prod.cycle.years.trad, by =5) ) +
# labs(color = '')+
# scale_color_manual(colors = c( cl.sh.yd, cl.nosh.yd, cl.tr.yd))+
theme(
plot.title = element_text(color="black", size=tit.fs, hjust=0.5),
legend.position = "none",
#legend.title = element_blank(),
# legend.background=element_blank(),
#legend.key = element_rect(fill = NA),
plot.margin = unit(c(.1,.0,.1,.1), "cm"),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.5, size = 12.0),
#axis.text.x=element_blank(),
axis.title.y = element_text(size =  y.tit.sz),
axis.title.x = element_text(size =  x.tit.sz),
strip.text.x = element_text(size =  9, color = 'black'),
panel.border = element_rect(colour = "black", fill=NA, size=1))
packages.load()
packages.load <- function(){
#  library(archetypes)
library(rlang)
# library(Formula)
# library(gmodels)
library(gridExtra)
library(rgdal)
library(spdep)
library(remotes)
require(remotes)
library(desiderata)
#  library(psych)
#library(minqa)
#library(numDeriv)
#library(Rdpack)
#library(sparseMVN)
#library(sphet)
#  library(ClustOfVar)
library(cluster)
library(PCAmixdata)
library("readxl")
library("openxlsx")
# require(phtest)
#library(plm)
library(formattable)
#library(moments)
#library(xlsx)
library(spsur)
library(systemfit)
# require(ivreg)
library(grid)
library(ggpubr)
library(FactoMineR)
library(stringi)
library(stringr)
library(tidyverse)
library(tidyr)
library(patchwork)
# library(lmtest)
# library( "plm" )
require("frontier")
library(gridExtra)
require(pvclust)
library(drc)
library("spdep")
library("spatialreg")
library("rgdal")
library("cowplot")
library("ggplot2")
#require('Lmtest')
library(tidytext)
library('ggh4x')
library(scales)
library(cluster)
library(factoextra)
`%+=%` <<- function(e1,e2) eval.parent(substitute(e1 <- e1 + e2))
# see https://stackoverflow.com/questions/12403312/find-the-number-of-spaces-in-a-string
countSpaces <<- function(s) { sapply(gregexpr(" ", s), function(p) { sum(p>=0) } ) }
} # Packages/libraries
packages.load()
yg.cc.plot.theor.trad <- ggplot(comp[comp$cm_crop == 1  &  (comp$Variety == 'Amazonia') & (comp$yld_pc_attain_plot < 100) ,  ]
, aes(x=years_since_planted , y=cc_yield_fn_Mg_per_ha)) +
geom_point(aes(x=years_since_planted  , y= cc_yield_fn_Mg_per_ha), shape = 1 ,color = 'gray') +
geom_smooth(data = cc.m.yd.all , aes(x= year , y=  Traditional  ), method = 'loess' ,se = FALSE, span = 0.605 , color = yld.line.col) +
# geom_point(data = cc.m.yd.all , aes(x= year , y=  Traditional , color = 'Traditional' )) +
# geom_smooth(data = cc.m.yd.all , aes(x= year , y=  Traditional , color = 'Traditional' ), method = 'loess' ,se = FALSE, span = 0.605 ) +
xlab('')+
#ylab(bquote('Nitrous oxide (kg '*N[2]O*' ha  '*yr^-1*')'))+
ylab(bquote('Yield (Mg  dry beans   '*ha^-1*' '*yr^-1*')     '))+
#facet_wrap( system ~ . , ncol =2, nrow = 1 )   +
#geom_point()+
ggtitle(tit.tx.t) +
scale_y_continuous(  limits = c( 0,yd.max   ) , breaks = seq(0, round(yd.max) , by=.5)) +
scale_x_continuous(  limits = c( 0, prod.cycle.years.trad  ), breaks =seq(0, prod.cycle.years.trad, by =5) ) +
# labs(color = '')+
# scale_color_manual(colors = c( cl.sh.yd, cl.nosh.yd, cl.tr.yd))+
theme(
plot.title = element_text(color="black", size=tit.fs, hjust=0.5),
legend.position = "none",
#legend.title = element_blank(),
# legend.background=element_blank(),
#legend.key = element_rect(fill = NA),
plot.margin = unit(c(.1,.0,.1,.1), "cm"),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.5, size = 12.0),
#axis.text.x=element_blank(),
axis.title.y = element_text(size =  y.tit.sz),
axis.title.x = element_text(size =  x.tit.sz),
strip.text.x = element_text(size =  9, color = 'black'),
panel.border = element_rect(colour = "black", fill=NA, size=1))
