}
for (t in all.trees) {
org.tree.random[t,'stem.volume.m3.sd'] <-     organics.tree[t,'total.aboveground.volume.m3.sd.frac']
org.tree.random[t,'stem.mass.kg.sd'] <- organics.tree[t,'total.aboveground.volume.m3.sd.frac']
org.tree.random[t,'leaf.mass.kg.sd'] <- organics.tree[t,'total.aboveground.volume.m3.sd.frac']
org.tree.random[t,'branch.mass.kg.per.tree.sd'] <- organics.tree[t,'total.aboveground.volume.m3.sd.frac']
if (organics.tree[t,'Tree.type'] == 'Deciduous'){ # thomas and martin
org.tree.random[t,'residue_C_frac_branch.sd'] <- 2.68/ 47.69
org.tree.random[t,'residue_C_frac_leaves.sd'] <- 3.42/47.25
org.tree.random[t,'branch_cycling_index.sd'] <- 0.2 # Need actual data
org.tree.random[t,'leaf_cycling_index.sd'] <- 0.12 # Saj
org.tree.random[t,'mature.age.yrs.sd'] <- 0.3213 # Calculated from Lowe et al. (1987) data
}
if (organics.tree[t,'Tree.type'] == 'Evergreen'){
org.tree.random[t,'residue_C_frac_branch.sd'] <- 3.58 / 47.78
org.tree.random[t,'residue_C_frac_leaves.sd'] <- 3.86/48.48
org.tree.random[t,'branch_cycling_index.sd'] <- 0.2 # Kahiu and Hanan (2017)
org.tree.random[t,'leaf_cycling_index.sd'] <- 0.0 # since evergreen
org.tree.random[t,'mature.age.yrs.sd'] <-  (4.6 / 86.0)  # From Table 1 of Van Do et al. (2017)
}
org.tree.random[t,'residue_N_frac_leaves.sd'] <- 30.4 / 203 # Heineman et al (2016)
org.tree.random[t,'residue_N_frac_branch.sd'] <- 30.4 / 203 # Heineman et al (2016)
}
org.tree.random <<-   org.tree.random
# Random pre-establishment age for non-cocoa trees
mean.age.frac.total.establishment.date <<- 0.5
sd.age.frac.total.establishment.date <<- 0.4
# Annual increment data
tree.growth  <-  read_excel("./data in/Lowe_et_al_1997.xlsx", sheet=2)
diams <- c('0-5',
'5-20',
'20-40',
'40-60',
'60-80',
'80-100',
'100-120',
'120-140',
'140-160',
'160-180',
'180-200',
'200-220',
'220-240',
'240-260',
'260-280',
'280-300',
'300-320',
'320-340',
'340-360',
'360-380',
'380-400',
'400-420',
'420-440',
'440-460',
'460-480',
'480-500',
'500-520')
vars <- c('Bole.increment.1000.cm3.yr',
'SD.Increment.1000.cm3.yr',
'Source'
)
tree.growth.data <<- data.frame(  matrix(ncol = length(vars ), nrow = length(diams) , dimnames=list(diams, vars)))
for (i in 1:nrow( tree.growth)  ){
tree.growth.data[i,'Diameter.cm.range'] <- tree.growth[i , 'Diameter.cm.range']
tree.growth.data[i,'Bole.increment.1000.cm3.yr'] <- tree.growth[i , 'Bole.increment.1000.cm3.yr']
tree.growth.data[i,'SD.Increment.1000.cm3.yr'] <- tree.growth[i , 'Bole.increment.1000.cm3.yr']
tree.growth.data[i,'Source'] <- 'Measured'
}
tree.growth.data[6,'Source'] <- 'Extrapolated'
tree.growth.data[7,'Source'] <- 'Extrapolated'
ordered.diams <- c( tree.growth.data[,'Diameter.cm.range'])
tree.growth.data[  ,  'Diameter.cm'] <- factor (  tree.growth.data[,'Diameter.cm.range'] ,ordered.diams )
tree.sizes.x.tick.fs <- 9
x.tick.angle <- 90
p.mg.right <- 0.2
p.mg.top <- 0.2
p.mg.bottom <- 0.2
p.mg.left <- 0.2
biom.incr <<- ggplot( tree.growth.data , aes(x = Diameter.cm, y = Increment.1000.cm3.yr ))+
geom_point()+
ylab(bquote('Biomass increment (1000  '*cm^3*' '*yr^-1*')')) +
xlab(bquote('Diameter (cm  '*tree^-1*') ')) +
theme(
#  panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = unit(c(0.65  ,    0.65  ,p.mg.right , p.mg.right), "cm"),
axis.text.x = element_text(angle = x.tick.angle, vjust = 0.5, hjust = 0.5, size =   tree.sizes.x.tick.fs , face = 'italic'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.background = element_blank())
## ~~ Inflation data
# Define dataframe for raw price inflation data
raw.inflation.data  <-  read_excel("./data in/price_inflation_data.xlsx", sheet=1)
products <- raw.inflation.data$product
mn.cc.production.period <- 30
cc.production.period.frac.2021 <- 0.53
# Define price multiplier dataframe
price.adj <- data.frame(  matrix(ncol = 2 , nrow = length(products) , dimnames=list(products,c('inflation.rate', 'deflator'))))
price.adj[,'deflator'] <- NA
CPI.deflator <-1/( raw.inflation.data[raw.inflation.data$product == 'inputs_general','mean.nomn.price.gr.frac.yr']^ 30
)
for (product in products) {
price.adj[product ,'inflation.rate'] <- as.numeric( raw.inflation.data[raw.inflation.data$product == product,'mean.nomn.price.gr.frac.yr'] )
# Calcualte projected final year price
power.final.year <- mn.cc.production.period * (1 - cc.production.period.frac.2021)
final.yr.price <- 1 * (  price.adj[product ,'inflation.rate'] ) ^ power.final.year
# Calculate estimated first year price
power.first.year <- 1 / (mn.cc.production.period * (cc.production.period.frac.2021))
first.yr.price <- (1^(power.first.year))/ price.adj[product ,'inflation.rate']
price.adj[product  ,'first.yr.price'] <- first.yr.price
price.adj[product  ,'final.yr.price'] <- final.yr.price
final.yr.price.deflat <- final.yr.price * CPI.deflator
production.period.mn.price <- (first.yr.price +  final.yr.price.deflat ) / 2
price.adj[product ,'deflator'] <-  production.period.mn.price
if ( (product == 'hardwood') ){ price.adj[product,'deflator']  <- final.yr.price.deflat  }
}
price.adj['cocoa' ,'deflator'] <- 1
price.adj <<-  price.adj
# ANIMAL N EXCRETION
organics.tree
an_excret_data   <- read.csv('.\\data in\\an_excret_data.csv')
livestock <- c('sheep' , 'goat', 'poultry', 'rabbits', 'cattle')
lives_N_excret <<- data.frame(  matrix(ncol = 1 , nrow = length(livestock) , dimnames=list(livestock , 'N_excret_kg_yr')))
lives_N_excret['sheep','N_excret_kg_yr'] <-  an_excret_data[1,'N_excret_kg_yr']
lives_N_excret['goat','N_excret_kg_yr'] <-  an_excret_data[2,'N_excret_kg_yr']
lives_N_excret['poultry','N_excret_kg_yr'] <-  an_excret_data[3,'N_excret_kg_yr']
lives_N_excret['rabbits','N_excret_kg_yr'] <-  an_excret_data[4,'N_excret_kg_yr']
lives_N_excret['cattle','N_excret_kg_yr'] <-  an_excret_data[5,'N_excret_kg_yr']
lives_N_excret <<- lives_N_excret
# Emission factors
e_factors <<- c(
"EF.1.sn"   ,
"EF.3.prp.cpp"  ,
"EF.3.prp.so"  ,
"EF.1.other" ,
"EF.4"  ,
"EF.5"   ,
"Frac.gas.f"  ,
"Frac.gas.m" ,
"Frac.leach"  ,
"FRAC.gasf.urea"  ,
"FRAC.gasf.an"     ,
"FRAC.gasf.nitr"  ,
"FRAC.gasf.an.nitr")
e.facs.vars <- c('value' ,
'std.dev',
'std.dev.frac',
'min.range',
'max.range',
'value.rd'
)
EF.raw <- read_excel("./data in/GHG_factors.xlsx", sheet=1)
EF <<-  data.frame(  matrix(ncol = length(e.facs.vars) , nrow = length( e_factors) , dimnames=list( e_factors , e.facs.vars )))
for (r in 1:nrow(EF)){
EF[r,'value'] <- EF.raw[r,'value']
EF[r,'min.range'] <- EF.raw[r,'min.value']
EF[r,'max.range'] <- EF.raw[r,'max.value']
EF[r,'std.dev'] <- 0.5 * (EF.raw[r,'max.value'] - EF.raw[r,'min.value']) /1.96
EF[r,'std.dev.frac'] <- EF[r,'std.dev']/ EF[r,'value']
}
EF <<- EF
}
main.data()
comp <- run_orga(comp)
comp <<- run.VOP(comp)
run.VOP <<- function(comp){
print('Running section VOP')
comp[,'gross.revenue.main.crop.usd.per.ha'] <- 0
comp[,'gross.revenue.alt.crop.usd.per.ha'] <- 0
comp[,'gross.revenue.ag.cmd.usd.per.ha'] <- 0
comp[,'gross.revenue.frt.usd.per.ha'] <- 0
comp[,'gross.revenue.shade.tree.fuelw.usd.per.ha'] <- 0
comp[,'gross.revenue.usd.per.ha'] <- 0
comp[,'variable.costs.usd.per.ha'] <- 0
comp[,'fixed.costs.usd.per.ha'] <- 0
comp[,'shade.tree.planting.costs.USD'] <- 0
comp[,'cc.tree.planting.costs.USD.per.lc']    <- 0
comp[,'lc.net.VOP.usd.per.ha'] <- 0
comp[,'lc.net.VOP.1000.usd.per.ha'] <- 0
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.cc'] <- 0
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ann.crop'] <- 0
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.frt'] <- 0
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ag.cmd'] <- 0
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.fuelw'] <- 0
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.hardw'] <- 0
#comp[,'cm.plot.ag.cmd.prod.USD.total.iadj']
#comp[,'cm.plot.ann.crop.prod.USD.total.iadj']
#comp[,'cm.plot.frt.prod.USD.total.iadj']
# Adjust raw parameters for uncertainty analysis
# Multiply individual variables by random impact based on standard deviation of variable
# Note that if uncertainty analysis is off (uncertainty == 0) then these values simply get multiplied by one
# Note all values are specified in inflation adjusted terms (based on mean production cycle period)
# REVENUE
comp[,'gross.revenue.main.crop.usd.per.ha'] <-  (  comp[,'cc.yd.lt.mn.Mg.ha'] *
comp[,'cm.price.USD.per.Mg'] *
price.adj['cocoa' , 'deflator'])
comp[,'gross.revenue.ag.cmd.usd.per.ha'] <- (comp[,'cm.plot.ag.cmd.prod.USD.total.iadj'] )
comp[,'gross.revenue.ann.crop.usd.per.ha'] <- (comp[,'cm.plot.ann.crop.prod.USD.total.iadj'] )
comp[,'gross.revenue.frt.usd.per.ha'] <- (comp[,'cm.plot.frt.prod.USD.total.iadj'] )
comp[,'gross.revenue.shade.tree.fuelw.usd.per.ha'] <- (1/1000)* comp[,'shade.tree.total.fuelw.stem.timber.mass.kg'] * p.fuelw.value.USD.Mg * price.adj['fuelwood' , 'deflator'] /  comp[,'cc.production.cycle']
comp[,'gross.revenue.shade.tree.fuelw.usd.per.ha'] %+=% ((1/1000)* comp[,'shade.tree.total.fuelw.branch.timber.mass.kg'] * p.fuelw.value.USD.Mg * price.adj['fuelwood' , 'deflator'] )
comp[,'gross.revenue.shade.tree.hardw.usd.per.ha'] <- comp[,'shade.tree.total.hardw.timber.volume.m3'] * p.hardw.value.USD.m3 * price.adj['hardwood' , 'deflator']/  comp[,'cc.production.cycle']
comp[,'gross.revenue.usd.per.ha'] <- (comp[,'gross.revenue.main.crop.usd.per.ha'] +
comp[,'gross.revenue.ag.cmd.usd.per.ha'] +
comp[,'gross.revenue.frt.usd.per.ha'] +
comp[,'gross.revenue.ann.crop.usd.per.ha'] +
comp[,'gross.revenue.shade.tree.fuelw.usd.per.ha'] +
comp[,'gross.revenue.shade.tree.hardw.usd.per.ha'])
# Revenue composition
comp[,'gross.revenue.usd.per.ha.frac.cc'] <- (comp[,'gross.revenue.main.crop.usd.per.ha'] /
comp[,'gross.revenue.usd.per.ha'] )
comp[,'gross.revenue.usd.per.ha.frac.ann.crop'] <- (comp[,'gross.revenue.ann.crop.usd.per.ha'] /
comp[,'gross.revenue.usd.per.ha'] )
comp[,'gross.revenue.usd.per.ha.frac.frt'] <- (comp[,'gross.revenue.frt.usd.per.ha'] /
comp[,'gross.revenue.usd.per.ha'] )
comp[,'gross.revenue.usd.per.ha.frac.ag.cmd'] <- (comp[,'gross.revenue.ag.cmd.usd.per.ha'] /
comp[,'gross.revenue.usd.per.ha'] )
comp[,'gross.revenue.usd.per.ha.frac.fuelw'] <- (comp[,'gross.revenue.shade.tree.fuelw.usd.per.ha'] /
comp[,'gross.revenue.usd.per.ha'] )
comp[,'gross.revenue.usd.per.ha.frac.hardw'] <- (comp[,'gross.revenue.shade.tree.hardw.usd.per.ha'] /
comp[,'gross.revenue.usd.per.ha'] )
# COSTS
comp[,'variable.costs.usd.per.ha'] <- comp[,'total_agrochem_costs_plus_fert_usd_per_ha'] * price.adj['inputs_general' , 'deflator']
comp[is.na(comp$variable.costs.usd.per.ha),'variable.costs.usd.per.ha'] <- 0
# Fixed/establishment costs are incurred only in year 1 and therefore are not subject to inflation (cost incurred is precisely equal to that listed)
comp[,'fixed.costs.usd.per.ha'] <- comp[,'capital.expenses.USD.per.ha']
comp[  ,'shade.tree.planting.costs.USD.per.lc'] <- shade.tree.plant.cost.per.tree.USD * comp[  ,'plot.quant.shade.trees.ha'] / comp[, 'cc.production.cycle' ]
comp[ comp$Variety == 'Hybrid' ,'cc.tree.planting.costs.USD.per.lc'] <- comp[ comp$Variety == 'Hybrid' ,'tree.count.per.ha'] *  cc.cost.per.stem.hybrid / comp[comp$Variety == 'Hybrid', 'cc.production.cycle' ]
comp[ comp$Variety == 'Amazonia' ,'cc.tree.planting.costs.USD.per.lc'] <- comp[comp$Variety == 'Amazonia'   ,'tree.count.per.ha'] *  cc.cost.per.stem.amaz/ comp[comp$Variety == 'Amazonia' , 'cc.production.cycle' ]
# Adjust labour costs based on labour inflation rate
comp[,'total.hi.labor.expenses.usd.per.ha.iadj'] <- comp[,'total.hi.labor.expenses.usd.per.ha'] *price.adj['labour' , 'deflator']
p.labr.ocost.USD.man.day.iadj <- p.labr.ocost.USD.man.day * price.adj['labour' , 'deflator']
comp[,'total.cocoa.costs.usd.per.ha'] <- ( comp[,'variable.costs.usd.per.ha'] +
comp[,'total.hi.labor.expenses.usd.per.ha.iadj']+
comp[,'total.hh.lab.man.days.per.year.per.ha'] *    p.labr.ocost.USD.man.day.iadj) +
- comp[  ,'cc.tree.planting.costs.USD.per.lc']
- comp[,'fixed.costs.usd.per.ha'] /  comp[, 'cc.production.cycle' ]
comp[,'total.other.tree.costs.usd.per.ha'] <- ( comp[  ,'shade.tree.planting.costs.USD.per.lc'])
# VOP
comp[,'lc.net.VOP.usd.per.ha'] <- (
comp[,'gross.revenue.usd.per.ha'] -
comp[,'total.cocoa.costs.usd.per.ha'] -
comp[,'total.other.tree.costs.usd.per.ha'] )
comp[,'lc.net.VOP.1000.usd.per.ha'] <-   comp[,'lc.net.VOP.usd.per.ha']/1000
#comp[!is.na(comp[,'lc.net.VOP.1000.usd.per.ha']) &
#   comp[,'lc.net.VOP.1000.usd.per.ha'] <= 0,'lc.net.VOP.1000.usd.per.ha'] <- 0
# Report VOP by revenue source
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.cc'] <- comp[,'gross.revenue.usd.per.ha.frac.cc'] *   comp[,'lc.net.VOP.1000.usd.per.ha']
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ann.crop'] <- comp[,'gross.revenue.usd.per.ha.frac.ann.crop'] *   comp[,'lc.net.VOP.1000.usd.per.ha']
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.frt'] <- comp[,'gross.revenue.usd.per.ha.frac.frt'] *   comp[,'lc.net.VOP.1000.usd.per.ha']
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ag.cmd'] <- comp[,'gross.revenue.usd.per.ha.frac.ag.cmd'] *   comp[,'lc.net.VOP.1000.usd.per.ha']
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.fuelw'] <- comp[,'gross.revenue.usd.per.ha.frac.fuelw'] *   comp[,'lc.net.VOP.1000.usd.per.ha']
comp[,'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.hardw'] <- comp[,'gross.revenue.usd.per.ha.frac.hardw'] *   comp[,'lc.net.VOP.1000.usd.per.ha']
# Report VOP by component
comp[,'lc.net.VOP.1000.usd.per.ha.cc'] <- comp[,'gross.revenue.usd.per.ha.frac.cc'] *   comp[,'lc.net.VOP.1000.usd.per.ha'] - comp[,'total.cocoa.costs.usd.per.ha']
comp[,'lc.net.VOP.1000.usd.per.ha.ann.crop'] <- comp[,'gross.revenue.usd.per.ha.frac.ann.crop'] *   comp[,'lc.net.VOP.1000.usd.per.ha']
comp[,'lc.net.VOP.1000.usd.per.ha.frt'] <- comp[,'gross.revenue.usd.per.ha.frac.frt'] *   comp[,'lc.net.VOP.1000.usd.per.ha']
comp[,'lc.net.VOP.1000.usd.per.ha.cmd'] <- comp[,'gross.revenue.usd.per.ha.frac.ag.cmd'] *   comp[,'lc.net.VOP.1000.usd.per.ha']
comp[,'lc.net.VOP.1000.usd.per.ha.fuelw'] <- comp[,'gross.revenue.usd.per.ha.frac.fuelw'] *   comp[,'lc.net.VOP.1000.usd.per.ha'] -comp[,'total.other.tree.costs.usd.per.ha']*.5
comp[,'lc.net.VOP.1000.usd.per.ha.hardw'] <- comp[,'gross.revenue.usd.per.ha.frac.hardw'] *   comp[,'lc.net.VOP.1000.usd.per.ha'] - comp[,'total.other.tree.costs.usd.per.ha']*.5
comp <<- comp
return (comp)
print('Section VOP successfully completed')
}
comp <<- run.VOP(comp)
ghg.row.count <- 1
vop.row.count <- 1
ghg.ab.dat[ , 'tot.value.mn' ] <- 0
for (t1 in  typologies) {
for (t2 in 1:5){
if (typ.uncertainty == 1) {
ids.to.include <- comp[comp$typ == t2 & comp$typology == t1 & !is.na(comp$typology) & !is.na(comp$typ) , 'hhID']
uncert.analysis(comp,ids.to.include)
}
# Absolute GHG emission uncertainty
for (cat in emis.catg){
if (cat == emis.catg[1] ) {var <- 'lc.N2O.synthetic.total.Mg.CO2eq' }
if (cat == emis.catg[2] ) {var <- 'lc.N2O.organic.total.Mg.CO2eq' }
if (cat == emis.catg[3] ) {var <- 'lc.Biomass.CO2.remv.cc.shade.total.Mg.ha.yr'  }
if (cat == emis.catg[4] ) {var <- 'lc.Biomass.CO2.remv.cc.cocoa.total.Mg.ha.yr' }
if (cat == emis.catg[5] ) {var <- 'lc.Biomass.CO2.remv.cc.fruit.total.Mg.ha.yr' }
if (cat == emis.catg[6] ) {var <- 'lc.Biomass.CO2.remv.cc.interc.total.Mg.ha.yr' }
# vr <- var.names[]
#   print(paste(var))
ghg.ab.dat[ghg.row.count, 'Emission.category'] <-  cat
ghg.ab.dat[ghg.row.count, 'Typology' ] <- t1
ghg.ab.dat[ghg.row.count, 'Type' ] <- t2
ghg.ab.dat[ghg.row.count, 'Type.str' ] <- unique(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'typ.str' ] )
ghg.ab.dat[ghg.row.count, 'Type.str.fill' ] <- unique(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'typ.str.fill' ] )
ghg.ab.dat[ghg.row.count, 'value.mn' ] <- mean(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , var] , na.rm = TRUE)
val <- ghg.ab.dat[ghg.row.count, 'value.mn' ]
ghg.ab.dat[ghg.row.count, 'value.sd' ] <-  sd( comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , var] , na.rm = TRUE)
#  Aggregated values
#ghg.ab.dat[ghg.ab.dat$Typology == t1 & ghg.ab.dat$Type == t2 & !is.na(ghg.ab.dat$Type) & !is.na(ghg.ab.dat$Typology ), 'tot.value.mn' ] %+=%  (val)
#  ghg.ab.dat[ghg.row.count, 'tot.value.mn' ] <- mean(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'lc.GHG.remv.cc.Mg.CO2eq.ha.yr' ], na.rm = TRUE)
ghg.ab.dat[ghg.row.count, 'tot.value.var' ] <- sd(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'lc.GHG.remv.cc.Mg.CO2eq.ha.yr' ] , na.rm = TRUE)
ghg.ab.dat[ghg.row.count, 'tot.value.sd' ] <-  mean(na.omit(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'lc.GHG.remv.cc.Mg.CO2eq.ha.yr.sd' ]))
ghg.ab.dat[ghg.row.count, 'tot.value.95pci' ] <-  mean(na.omit(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'lc.GHG.remv.cc.Mg.CO2eq.ha.yr.95pci' ]))
ghg.row.count %+=% 1
}
# VOP uncertainty
for (cat in rev.catg){
# var <-  var.names[ var.names == cat ]
if (cat == rev.catg[1]) {var <- 'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.cc' }
if (cat == rev.catg[2]) {var <- 'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.fuelw' }
if (cat == rev.catg[3]) {var <- 'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.hardw' }
if (cat == rev.catg[4]) {var <- 'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ann.crop' }
if (cat == rev.catg[5]) {var <- 'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.frt' }
if (cat == rev.catg[6]) {var <- 'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ag.cmd' }
# vr <- var.names[]
#   print(paste(var))
vop.dat[vop.row.count, 'Revenue.category'] <-  cat
vop.dat[vop.row.count, 'Typology' ] <- t1
vop.dat[vop.row.count, 'Type' ] <- t2
vop.dat[vop.row.count, 'Type.str' ] <- unique(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'typ.str' ] )
vop.dat[vop.row.count, 'Type.str.fill' ] <- unique(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'typ.str.fill' ] )
vop.dat[vop.row.count, 'value.mn' ] <- mean(na.omit(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , var]))
vop.dat[vop.row.count, 'value.sd' ] <-  sd(na.omit(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , var]))
# Aggregated values
vop.dat[vop.row.count, 'tot.value.mn' ] <- mean(na.omit(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'lc.net.VOP.1000.usd.per.ha']))
vop.dat[vop.row.count, 'tot.value.var' ] <- sd(na.omit(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'lc.net.VOP.1000.usd.per.ha']))
vop.dat[vop.row.count, 'tot.value.sd' ] <-  mean(na.omit(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'lc.net.VOP.1000.usd.per.ha.sd']))
vop.dat[vop.row.count, 'tot.value.95pci' ] <-  mean(na.omit(comp[comp$typology ==  t1 & comp$typ == t2  & !is.na(comp$typology) & !is.na(comp$typ) , 'lc.net.VOP.1000.usd.per.ha.95pci']))
vop.row.count %+=% 1
}
}
}
ghg.row.count  <- 1
ghg.ab.dat[, 'tot.value.mn' ] <- 0
for (t1 in  typologies) {
for (t2 in 1:5){
for (cat in emis.catg){
val <- ghg.ab.dat[ghg.row.count, 'value.mn' ]
ghg.ab.dat[ghg.ab.dat$Typology == t1 & ghg.ab.dat$Type == t2 & !is.na(ghg.ab.dat$Type) & !is.na(ghg.ab.dat$Typology ), 'tot.value.mn' ] %+=%  (val)
ghg.row.count %+=% 1
}
}
}
vop.dat$Typology <- factor( vop.dat$Typology   , levels= ordered.typologies)
ordered.revenue.categories <<- c('Cocoa'
,'Fruit trees',
'Annual crops',
'Other agrocommodities',
'Fuelwood',
'Hardwood lumber')
vop.dat$Revenue.category <- factor( vop.dat$Revenue.category   , ordered.revenue.categories)
vop.dat[,'Type.str'] <- factor(  vop.dat[,'Type.str'], levels = ordered.typ)
vop.dat <<-  vop.dat
View(vop.dat)
fig.bar.intrag.vop.b <- ggplot( data = vop.dat[, ]  )  +
geom_bar(aes(y = value.mn  , x = Type.str.fill, fill = Revenue.category) , position="stack", stat="identity",  width = bar.width , colour=bar.chart.border.color , size=bar.chart.border.thickness)+
geom_errorbar(aes(ymin = tot.value.mn -  tot.value.sd, ymax = tot.value.mn +  tot.value.sd , x = Type.str.fill) , width= error.bar.width , size = error.bar.size , color = nvp.error.bar.color
) +
scale_fill_manual(labels = labels_rev_srcs  , values = colors_rev_srcs )+
xlab('')+
ylab(bquote('Value of production (1000 USD '*ha^-1*' '*yr^-1*')    '))+
facet_wrap( Typology ~ . , ncol = 3, nrow = 1 , scales = "free_x")   +
scale_y_continuous(
limits = c(0.0, 3.3) ,breaks = seq(0.0, 3.25, by = 0.5),
labels = scales::number_format(accuracy = 0.1))  +
# guides(fill = guide_legend(override.aes = list(colour = "gray", size = .392)))+
guides(fill = guide_legend(byrow = TRUE))+
theme(
legend.text = element_text(size = intrag.fig.vop.leg.text.fs),
plot.margin = unit(c(p.mg.top,p.mg.right, p.mg.bottom ,p.mg.left), "cm"),
axis.ticks.x = element_blank(),
axis.text.x = element_text(angle = x.tick.angle, vjust = 0.5, hjust=0.5, size = x.tick.fs),
axis.text.y = element_text(vjust = 0.5, hjust=0.5, size = y.tick.fs),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
# Legend
legend.key.height = unit(intrag.leg.key.h.vop, 'cm'),
legend.key.width = unit(intrag.leg.key.w.vop, 'cm'),
legend.spacing.x = unit(intrag.leg.space.x.vop, 'cm'),
legend.spacing.y = unit(intrag.leg.space.y.vop, 'cm'),
#  legend.key.size = unit(.42, 'cm'),
# legend.position = "bottom",
legend.position = c(fig.vop.leg.x.coord , fig.vop.leg.y.coord),
legend.margin = margin(.00005,.00005,.00005,.00005),
legend.box.margin = margin(.00005,.00005,.00005,.00005),
legend.title = element_blank(),
axis.title.y = element_text(size =  y.tit.sz, face = "plain"),
# axis.text.x=element_blank(),
strip.text.x = element_text(size =  facet.tx.size, color = 'black'),
strip.background = element_rect(color='black', fill='white', size=1.0, linetype="solid"),
panel.border = element_rect(colour = "black", fill=NA, size=1))  #810,320
fig.bar.intrag.vop.b
typology.data <- function(){
setwd(main.dir)
bioclim <- readOGR("Spatial_data/bioclimatic_data.shp")
# Modify Bioclim variables
bioclim$elev <- as.numeric(bioclim$elev1)
bioclim$temp <- as.numeric(bioclim$temp1)
bioclim$precip <- as.numeric(bioclim$precip_1)
bioclim$temp.mmm <- as.numeric(bioclim$temp1_2)
bioclim$cv_precip <- as.numeric(bioclim$cv_precip1)
bioclim.df <<- as.data.frame( bioclim)
vr.list <<- c('district',
#Production characteristics
'Variety',
'cc.catg.str',
'years_since_planted',
'cc.production.cycle',
'cm.plot.monocrop.bool',
# Yield variables
'cc_yield_fn_Mg_per_ha',
'yld_pc_attain_plot',
# Practices
'weeds_per_year',
'prunes_per_year',
'fert_bool',
'fungi.app.cocoa',
'insecti.app.cocoa',
'herbi.app.cocoa',
'pollination.bool' ,
'ccoa_spread_pods',
'ccoa_piled_pods',
'ccoa_passive_pods',
'ccoa_apply_mnr_farm',
'ccoa_apply_mnr_bought',
'ccoa_apply_mnr_anywhere',
'ccoa_apply_cmp',
# Vegetative structure and diversity
'tree.count.per.ha',
'tree.config.cocoa',
'plot.overstory.crown',
'other.tree.to.cm.tree.ratio',
'shade.tree.to.cm.tree.ratio',
'plot.quant.shade.trees.ha',
'plot.quant.large.shade.trees.ha',
'num_other_tree_crops',
'num_other_root_grain_crops',
'plot.quant.trees.per.ha.greater.than.50.m',
'plot.quant.trees.per.ha.greater.than.35.m',
'plot.quant.trees.per.ha.greater.than.20.m',
# Diseases
'detect.bool.blackpod',
'detect.bool.capsid',
'detect.bool.stemborer' ,
'detect.bool.rodents',
'detect.bool.CSSVD',
'detect.bool.stemcanker',
'detect.bool.other',
'path.contr.cc.vir.org',
'path.contr.cc.bact.org',
'path.contr.cc.fung.org',
'path.contr.cc.insect.org',
'path.contr.cc.vir.syn',
'path.contr.cc.bact.syn',
'path.contr.cc.fung.syn',
'path.contr.cc.insect.syn',
'path.contr.tot.org',
'path.contr.tot.syn',
'frac.tot.paths.controlled.syn',
'frac.tot.paths.controlled.org',
'quant.paths',
'quant.paths.fungal',
'quant.paths.viral',
'quant.paths.bacterial',
'quant.paths.insect',
# Inputs
'total_N_fert_applied_Mg_per_ha',
'total_non_N_fert_applied_Mg_per_ha',
'total_fert_applied_Mg_per_ha',
# Labour
'total.hi.labor.days.per.year.per.ha',
# GHG emissions variables
# 'lc.GHG.remv.cc.Mg.CO2eq.ha.yr',
#'lc.GHG.N2O.Mg.CO2eq',
# 'lc.GHG.remv.C.Mg.CO2eq',
# 'lc.N2O.synthetic.total.Mg.CO2eq' ,
# 'lc.N2O.organic.shadet.resd.total.Mg.CO2eq' ,
# 'lc.N2O.organic.resd.total.Mg.CO2eq' ,
# 'lc.N2O.organic.inter.resd.total.Mg.CO2eq' ,
# 'lc.N2O.organic.other.total.Mg.CO2eq'  ,
# 'lc.Biomass.CO2.remv.cc.shade.total.Mg.ha.yr' ,
# 'lc.Biomass.CO2.remv.cc.cocoa.total.Mg.ha.yr' ,
# 'lc.Biomass.CO2.remv.cc.fruit.total.Mg.ha.yr' ,
#  'lc.Biomass.CO2.remv.cc.interc.total.Mg.ha.yr'
# Profitability
#'lc.net.VOP.1000.usd.per.ha',
#  'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.cc',
# 'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ann.crop',
#    'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.frt',
# 'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.ag.cmd',
#  'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.fuelw',
#  'lc.net.VOP.1000.usd.per.ha.frac.rev.basis.hardw',
# Agronomic characteristics
'domn_soil',
'water.log.bool',
'water.logged'
)
# Add survey variables to bioclim
for (id in bioclim$hhID){
# Add variables to bioclim
for (v in 1:length(vr.list)){
var <- vr.list[v]
v <- comp[comp$hhID == id ,var ]
if (is.numeric(v)){
bioclim[bioclim$hhID == id ,var ] <- v
} else {
bioclim[bioclim$hhID == id ,var ] <- v
}
}
}
T.df <<- as.data.frame(bioclim)
}
typology.data()
fig.yd
fig.ghg  # ideal dimensions 860, 390
run.typology()
# Store images for specific tasks
save.image('cocoa_typology.RData')
